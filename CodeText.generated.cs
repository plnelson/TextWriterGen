//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.IO;

//
// This code was generated by TextWriterGen from Self.txt
//

namespace TextWriterGen
{
    internal class CodeText
    {
        private readonly TextWriter _writer;

        public CodeText(TextWriter writer)
        {
            _writer = writer;
        }

        public void Prolog(string @inputFileName, string @namespaceName, string @className)
        {
            _writer.WriteLine(@"//------------------------------------------------------------------------------");
            _writer.WriteLine(@"// <auto-generated>");
            _writer.WriteLine(@"//     This code was generated by a tool.");
            _writer.WriteLine(@"//");
            _writer.WriteLine(@"//     Changes to this file may cause incorrect behavior and will be lost if");
            _writer.WriteLine(@"//     the code is regenerated.");
            _writer.WriteLine(@"// </auto-generated>");
            _writer.WriteLine(@"//------------------------------------------------------------------------------");
            _writer.WriteLine();
            _writer.WriteLine(@"using System.IO;");
            _writer.WriteLine();
            _writer.WriteLine(@"//");
            _writer.WriteLine(string.Concat(@"// This code was generated by TextWriterGen from ", @inputFileName));
            _writer.WriteLine(@"//");
            _writer.WriteLine();
            _writer.WriteLine(string.Concat(@"namespace ", @namespaceName));
            _writer.WriteLine(@"{");
            _writer.WriteLine(string.Concat(@"    internal class ", @className));
            _writer.WriteLine(@"    {");
            _writer.WriteLine(@"        private readonly TextWriter _writer;");
            _writer.WriteLine();
            _writer.WriteLine(string.Concat(@"        public ", @className, @"(TextWriter writer)"));
            _writer.WriteLine(@"        {");
            _writer.WriteLine(@"            _writer = writer;");
            _writer.WriteLine(@"        }");
        }

        public void FunctionStart(string @name, string @parameters)
        {
            _writer.WriteLine();
            _writer.WriteLine(string.Concat(@"        public void ", @name, @"(", @parameters, @")"));
            _writer.WriteLine(@"        {");
        }

        public void EmptyLine()
        {
            _writer.WriteLine(@"            _writer.WriteLine();");
        }

        public void LiteralLine(string @text)
        {
            _writer.WriteLine(string.Concat(@"            _writer.WriteLine(@""", @text, @""");"));
        }

        public void SubstitutedLine(string @concatParams)
        {
            _writer.WriteLine(string.Concat(@"            _writer.WriteLine(string.Concat(", @concatParams, @"));"));
        }

        public void FunctionEnd()
        {
            _writer.WriteLine(@"        }");
        }

        public void Epilog()
        {
            _writer.WriteLine(@"    }");
            _writer.WriteLine(@"}");
        }
    }
}
